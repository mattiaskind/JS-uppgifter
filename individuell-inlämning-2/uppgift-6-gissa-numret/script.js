'use strict';

//////////// GLOBALA VARIABLER ////////////

// en konstant f칬r totala antalet gissningar spelaren har
const NUMBER_OF_GUESSES = 10;

const gameState = {
  // guess lagrar det senast gissade numret
  guess: null,
  // antal gissningar totalt
  guessesLeft: NUMBER_OF_GUESSES,
  // det r칛tta svaret
  answer: Math.floor(Math.random() * 100 + 1),
  // indikerar huruvida spelet p친g친r eller inte
  gameInProgress: true,
  // indikerar om den senast inmatade gissningen var tom eller utanf칬r intervallet
  outOfRangeOrEmpty: false,
};

const responses = {
  low: ['F칬r l친gt gissat', 'Gissa h칬gre', 'Tyv칛rr, det 칛r h칬gre'],
  high: ['F칬r h칬gt gissat', 'Gissa l칛gre', 'Tyv칛rr, gissa l칛gre'],
};

//////////// DOM-element ////////////

// Paneler
const panelTooLow = document.querySelector('.panel-guess-low');
const panelTooHigh = document.querySelector('.panel-guess-high');
const panelResult = document.querySelector('.panel-guess-result');
const panelGameOver = document.querySelector('.panel-game-over');
const panelWin = document.querySelector('.panel-win');

// Knappar
const btnGuess = document.querySelector('#btn-guess');
const btnPlayAgain = document.querySelectorAll('.btn-play-again');

// Inputf칛lt
const inputGuess = document.querySelector('#input-guess');

// 칐vrigt
const number = document.querySelector('.number-of-guesses-left');
const panelResultText = document.querySelector('.panel-guess-result--text');
const inputLabel = document.querySelector('#label');
const gameOverAnswer = document.querySelector('.game-over--answer');

console.log('R츿TT SVAR 츿R: ' + gameState.answer);

//////////// EVENT HANDLERS ////////////

number.innerHTML = NUMBER_OF_GUESSES;
panelResultText.innerHTML = 'gissningar kvar';

btnGuess.addEventListener('click', handleUserGuess);
btnPlayAgain.forEach((btn) => {
  btn.addEventListener('click', playAgain);
});

//////////// FUNKTIONER ////////////

function playAgain() {
  initGame();
  if (!panelGameOver.classList.contains('hidden')) {
    panelGameOver.classList.add('hidden');
  }
  if (!panelWin.classList.contains('hidden')) {
    panelWin.classList.add('hidden');
  }
}

function handleUserGuess(e) {
  e.preventDefault();

  // Kontrollera om f칛ltet 칛r tomt n칛r anv칛ndaren klicka p친 gissa-knappen
  if (inputGuess.value === '') {
    inputLabel.innerHTML = 'Du m친ste fylla i ett nummer! 游땐';
    gameState.outOfRangeOrEmpty = true;
    return;

    // F칛ltet 칛r inte tomt, funktionen saveInput som f칬rs칬ker omvandla
    // inmatningen till ett nummer anropas. Om omvandlingen misslyckas eller
    // om spelet inte p친g친r avslutas funktionen.
    // Det h칛r hindrar bes칬karen fr친n att forts칛tta ett avslutat spel eller
    // ge felaktig inmatning genom att 칛ndra i html-koden (exempelvis genom att l칛gga
    // css-klassen hidden p친 element eller 칛ndra input-f칛ltet fr친n number till text).
  } else if (
    !saveInput(inputGuess.value) ||
    gameState.gameInProgress === false
  ) {
    return;
  }

  // Kontrollera om anv칛ndaren har matat in en siffra utanf칬r intervallet 1-100
  if (gameState.guess > 100 || gameState.guess < 1) {
    gameState.outOfRangeOrEmpty = true;
    inputLabel.innerHTML = 'Du m친ste gissa mellan 1 och 100! 游뗻';
    return;

    // Siffran som matats in 칛r inom intervallet, kontrollera om den tidigare
    // inmatningen var utanf칬r intervallet och ge respons p친 det.
  } else if (gameState.outOfRangeOrEmpty) {
    inputLabel.innerHTML = 'Bra, forts칛tt gissa! 游땕';
    gameState.outOfRangeOrEmpty = false;
  }

  // Minska antalet kvarvarande gissningar och anropa
  // funktion f칬r att j칛mf칬ra gissningen med svaret
  gameState.guessesLeft--;
  number.innerHTML = gameState.guessesLeft;
  checkGuess();
}

// Den h칛r funktionen har jag skrivit f칬r att underl칛tta uppdatering av class-attributen
// och f칬r att slippa skriva samma kod p친 flera st칛llen. Den anv칛nds i samband med
// att gissningarna j칛mf칬rs med svaret.
function updatePanelStatus(currentPanel, newPanel) {
  if (currentPanel.classList.contains('last-guess'))
    currentPanel.classList.remove('last-guess');
  newPanel.classList.add('last-guess');
}

// Funktionen anv칛nds f칬r att kontrollera en gissning
function checkGuess() {
  const { guess, answer } = gameState;

  // Kontrollera om gissningen 칛r f칬r h칬g, f칬r l친g eller om det 칛r r칛tt svar

  if (guess > answer) {
    // Ta bort tidigare text i panelerna som l칛mnar respons p친 inmatningen
    panelsDeleteText();
    // Uppdatera panelerna baserat p친 den nuvarande inmatningen
    updatePanelStatus(panelTooLow, panelTooHigh);

    // Slumpa fram en respons p친 den f칬r h칬ga inmatningen
    const response = Math.floor(Math.random() * responses.high.length);
    panelTooHigh.innerText = responses.high[response] + '!';
  }
  if (guess < answer) {
    // Ta bort tidigare text i panelerna som l칛mnar respons p친 inmatningen
    panelsDeleteText();
    // Uppdatera panelerna baserat p친 den nuvarande inmatningen
    updatePanelStatus(panelTooHigh, panelTooLow);

    // Slumpa fram en respons p친 den f칬r l친ga inmatningen
    const response = Math.floor(Math.random() * responses.low.length);
    panelTooLow.innerText = responses.low[response] + '!';
  }
  if (guess === answer) {
    playerWins();
  } else if (gameState.guessesLeft === 0) {
    gameState.gameInProgress = false;
    gameOver();
  }
}

// Funktionen kontrollerar samt sparar input-argumentet i game state-objektet
// returnerar true eller false beroende p친 utfall
function saveInput(input) {
  let guess = Number(input);
  if (Number.isNaN(guess)) return false;
  gameState.guess = guess;
  return true;
}

// Tar bort text fr친n panelerna
function panelsDeleteText() {
  panelTooLow.innerHTML = panelTooHigh.innerHTML = '';
}

// Nollst칛ller panelerna: tar bort text och bakgrundsf칛rg
function clearPanels() {
  console.log('Clear');
  panelsDeleteText();
}

// Tar fram panelen som visar att spelet 칛r slut
function gameOver() {
  panelGameOver.classList.remove('hidden');
  gameOverAnswer.innerHTML = `Svaret var ${gameState.answer}!`;
}

// Tar fram panelen som visar att anv칛ndaren gissade r칛tt
function playerWins() {
  panelsDeleteText();
  number.innerHTML = gameState.answer;
  panelResultText.innerHTML = '';
  panelWin.classList.remove('hidden');
}

// Initierar spelet, om anv칛ndaren vill spela igen efter avslutat spel
function initGame() {
  gameState.guessesLeft = NUMBER_OF_GUESSES;
  gameState.answer = Math.floor(Math.random() * 100 + 1);
  gameState.gameInProgress = true;

  inputGuess.value = '';
  number.innerHTML = NUMBER_OF_GUESSES;
  panelResultText.innerHTML = 'gissningar kvar';

  clearPanels();

  console.log(gameState.answer);
}
